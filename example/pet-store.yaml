openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: modified version of pet store api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: https://petstore3.swagger.io/api/v3

tags:
  - name: pet
    description: Everything about your Pets

  - name: store
    description: Access to Petstore orders

  - name: user
    description: Operations about user

paths:

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/RequestToCreateUser'

      responses:
        '200':
          $ref: "#/components/responses/ResponseToCreateUser"
        '400':
          $ref: "#/components/responses/ResponseWithErrors"
        '404':
          $ref: "#/components/responses/ResponseWithErrors"

  /user/{id}:
    get:
      operationId: selectUser
      tags:
        - user
      summary: Get user by user id
      description: ''
      parameters:
      - $ref: "#/components/parameters/UserIdInPath"
      responses:
        '200':
          $ref: "#/components/responses/ResponseToSelectUser"
        '400':
          $ref: "#/components/responses/ResponseWithErrors"
        '404':
          $ref: "#/components/responses/ResponseWithErrors"

    patch:
      operationId: updateUser
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
      - $ref: "#/components/parameters/UserIdInPath"
      requestBody:
        $ref: "#/components/requestBodies/RequestToUpdateUser"
      responses:
        '200':
          $ref: "#/components/responses/ResponseToUpdateUser"
        '400':
          $ref: "#/components/responses/ResponseWithErrors"
        '404':
          $ref: "#/components/responses/ResponseWithErrors"

    delete:
      operationId: deleteUser
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
      - $ref: "#/components/parameters/UserIdInPath"
      responses:
        '200':
          $ref: "#/components/responses/ResponseToDeleteUser"
        '400':
          $ref: "#/components/responses/ResponseWithErrors"
        '404':
          $ref: "#/components/responses/ResponseWithErrors"

components:
  parameters:
    UserIdInPath:
      name: id
      in: path
      description: 'The name that needs to be fetched. Use user1 for testing. '
      required: true
      schema:
        type: string

  requestBodies:
    RequestToCreateUser:
      description: Create a user in the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RequestToCreateUser"

    RequestToUpdateUser:
      description: Update an existent user in the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RequestToUpdateUser"

  responses:
    ResponseWithErrors:
      $ref: '#/components/schemas/ResponseWithErrors'

    ResponseToSelectUsers:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseToSelectUsers'

    ResponseToSelectUser:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseToSelectUser'

    ResponseToCreateUser:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseToCreateUser'

    ResponseToUpdateUser:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseToUpdateUser'

    ResponseToDeleteUser:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseToDeleteUser'

  schemas:

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1

    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold

    RequestToCreateUser:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/User"

    ResponseToCreateUser:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [id]
          properties:
            id:
              type: string

    RequestToUpdateUser:
      type: object
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/User"

    ResponseToUpdateUser:
      type: object
      required: [data]
      properties:
        data:
          type: boolean

    ResponseToSelectUsers:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"

    ResponseToSelectUser:
      type: object
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/User"

    ResponseToDeleteUser:
      type: object
      properties:
        data:
          type: boolean

    ResponseWithErrors:
      type: object
      required: [errors]
      properties:
        errors:
          type: array
          items:
            type: object
            required: [message]
            properties:
              code:
                type: string
              message:
                type: string
